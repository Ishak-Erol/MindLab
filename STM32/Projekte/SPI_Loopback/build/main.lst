ARM GAS  /tmp/cce3vpWk.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB69:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  /tmp/cce3vpWk.s 			page 2


  34:Core/Src/main.c **** #define EEPROM_INSTR_READ 0x03  // read data
  35:Core/Src/main.c **** #define EEPROM_INSTR_WRITE 0x02 // write data
  36:Core/Src/main.c **** #define EEPROM_INSTR_WRDI 0x04  // set the write disable
  37:Core/Src/main.c **** #define EEPROM_INSTR_WREN 0x06  // set the write enable
  38:Core/Src/main.c **** #define EEPROM_INSTR_RDSR 0x05  // read status register
  39:Core/Src/main.c **** #define EEPROM_INSTR_WRSR 0x01  // write status register
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** #define EEPROM_CS_LOW()                                                        \
  42:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET) // Select slave Pin
  43:Core/Src/main.c **** #define EEPROM_CS_HIGH()                                                       \
  44:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET) // Select slave Pin
  45:Core/Src/main.c **** /* USER CODE END PD */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  48:Core/Src/main.c **** /* USER CODE BEGIN PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  53:Core/Src/main.c **** SPI_HandleTypeDef hspi2;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** static void MX_GPIO_Init(void);
  62:Core/Src/main.c **** static void MX_SPI2_Init(void);
  63:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PFP */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  68:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  69:Core/Src/main.c **** uint8_t EEPROM_ReadByte(uint16_t addr) {
  70:Core/Src/main.c ****   uint8_t data;
  71:Core/Src/main.c ****   uint8_t msg[3];
  72:Core/Src/main.c ****   msg[0] = EEPROM_INSTR_READ;
  73:Core/Src/main.c ****   msg[1] = (addr >> 8) & 0xFF; // MSB wird um 8 bits nach rechts verschoben
  74:Core/Src/main.c ****                                // und anschlißen wird der rest "abgeschnitten"
  75:Core/Src/main.c ****   msg[2] = addr & 0xFF;
  76:Core/Src/main.c **** 
  77:Core/Src/main.c ****   EEPROM_CS_LOW();
  78:Core/Src/main.c ****   HAL_Delay(1000);
  79:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi2, msg, 3,
  80:Core/Src/main.c ****                    HAL_MAX_DELAY); // separates transmit und receive, da hier
  81:Core/Src/main.c ****                                    // ers die adresse gesendet werden musss
  82:Core/Src/main.c ****                                    // bevor diese ausgelesen werden kann
  83:Core/Src/main.c ****   HAL_SPI_Receive(&hspi2, &data, 1, HAL_MAX_DELAY);
  84:Core/Src/main.c ****   HAL_Delay(1000);
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   EEPROM_CS_HIGH();
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   return data;
  89:Core/Src/main.c **** }
  90:Core/Src/main.c **** /* USER CODE END 0 */
ARM GAS  /tmp/cce3vpWk.s 			page 3


  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /**
  93:Core/Src/main.c ****  * @brief  The application entry point.
  94:Core/Src/main.c ****  * @retval int
  95:Core/Src/main.c ****  */
  96:Core/Src/main.c **** int main(void) {
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* USER CODE END 1 */
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick.
 105:Core/Src/main.c ****    */
 106:Core/Src/main.c ****   HAL_Init();
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE END Init */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Configure the system clock */
 113:Core/Src/main.c ****   SystemClock_Config();
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END SysInit */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Initialize all configured peripherals */
 120:Core/Src/main.c ****   MX_GPIO_Init();
 121:Core/Src/main.c ****   MX_SPI2_Init();
 122:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE END 2 */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Infinite loop */
 127:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 128:Core/Src/main.c **** 
 129:Core/Src/main.c ****   // const uint8_t message[] = "hello!1";
 130:Core/Src/main.c ****   // uint8_t empfangen[sizeof(message)];
 131:Core/Src/main.c ****   while (1) {
 132:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 133:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 134:Core/Src/main.c ****     GPIO_PinState buttonPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 135:Core/Src/main.c ****     if (buttonPressed == GPIO_PIN_SET) {
 136:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 137:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 138:Core/Src/main.c ****       EEPROM_ReadByte(0x0000);
 139:Core/Src/main.c ****     }
 140:Core/Src/main.c ****     // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 141:Core/Src/main.c ****     // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 142:Core/Src/main.c ****     // HAL_Delay(1000);
 143:Core/Src/main.c ****     /* USER CODE END WHILE */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 146:Core/Src/main.c ****     //   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 147:Core/Src/main.c **** 
ARM GAS  /tmp/cce3vpWk.s 			page 4


 148:Core/Src/main.c ****     //   HAL_Delay(1000);
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****     //   HAL_SPI_TransmitReceive(&hspi2, message, empfangen, (uint16_t)8,
 151:Core/Src/main.c ****     //   HAL_MAX_DELAY); // Gesendete Bytes kommen direkt zurück, sofort
 152:Core/Src/main.c ****     //   nutzbar, da master und slave dieselben sind (loopback)
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****     //   if (strcmp(message, empfangen) == 0) {
 155:Core/Src/main.c ****     //     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 156:Core/Src/main.c ****     //     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 157:Core/Src/main.c ****     //   }
 158:Core/Src/main.c **** 
 159:Core/Src/main.c ****     //   HAL_Delay(3000);
 160:Core/Src/main.c ****   }
 161:Core/Src/main.c ****   /* USER CODE END 3 */
 162:Core/Src/main.c **** }
 163:Core/Src/main.c **** 
 164:Core/Src/main.c **** /**
 165:Core/Src/main.c ****  * @brief System Clock Configuration
 166:Core/Src/main.c ****  * @retval None
 167:Core/Src/main.c ****  */
 168:Core/Src/main.c **** void SystemClock_Config(void) {
 169:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 170:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 173:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 174:Core/Src/main.c ****    */
 175:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 176:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 177:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 178:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 179:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 180:Core/Src/main.c ****     Error_Handler();
 181:Core/Src/main.c ****   }
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 184:Core/Src/main.c ****    */
 185:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 186:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 190:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 193:Core/Src/main.c ****     Error_Handler();
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /**
 198:Core/Src/main.c ****  * @brief SPI2 Initialization Function
 199:Core/Src/main.c ****  * @param None
 200:Core/Src/main.c ****  * @retval None
 201:Core/Src/main.c ****  */
 202:Core/Src/main.c **** static void MX_SPI2_Init(void) {
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 0 */
ARM GAS  /tmp/cce3vpWk.s 			page 5


 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* USER CODE END SPI2_Init 0 */
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 1 */
 209:Core/Src/main.c **** 
 210:Core/Src/main.c ****   /* USER CODE END SPI2_Init 1 */
 211:Core/Src/main.c ****   /* SPI2 parameter configuration*/
 212:Core/Src/main.c ****   hspi2.Instance = SPI2;
 213:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 214:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 215:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 216:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 217:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 218:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 219:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 220:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 221:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 222:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 223:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 224:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 225:Core/Src/main.c ****     Error_Handler();
 226:Core/Src/main.c ****   }
 227:Core/Src/main.c ****   /* USER CODE BEGIN SPI2_Init 2 */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE END SPI2_Init 2 */
 230:Core/Src/main.c **** }
 231:Core/Src/main.c **** 
 232:Core/Src/main.c **** /**
 233:Core/Src/main.c ****  * @brief GPIO Initialization Function
 234:Core/Src/main.c ****  * @param None
 235:Core/Src/main.c ****  * @retval None
 236:Core/Src/main.c ****  */
 237:Core/Src/main.c **** static void MX_GPIO_Init(void) {
  26              		.loc 1 237 32 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 56
 238:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 238 3 view .LVU1
  43              		.loc 1 238 20 is_stmt 0 view .LVU2
  44 0006 0024     		movs	r4, #0
  45 0008 0494     		str	r4, [sp, #16]
  46 000a 0594     		str	r4, [sp, #20]
  47 000c 0694     		str	r4, [sp, #24]
  48 000e 0794     		str	r4, [sp, #28]
ARM GAS  /tmp/cce3vpWk.s 			page 6


 239:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 244:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  49              		.loc 1 244 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 244 3 view .LVU4
  52              		.loc 1 244 3 view .LVU5
  53 0010 254B     		ldr	r3, .L3
  54 0012 9A69     		ldr	r2, [r3, #24]
  55 0014 42F00802 		orr	r2, r2, #8
  56 0018 9A61     		str	r2, [r3, #24]
  57              		.loc 1 244 3 view .LVU6
  58 001a 9A69     		ldr	r2, [r3, #24]
  59 001c 02F00802 		and	r2, r2, #8
  60 0020 0192     		str	r2, [sp, #4]
  61              		.loc 1 244 3 view .LVU7
  62 0022 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 244 3 view .LVU8
 245:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  65              		.loc 1 245 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 245 3 view .LVU10
  68              		.loc 1 245 3 view .LVU11
  69 0024 9A69     		ldr	r2, [r3, #24]
  70 0026 42F01002 		orr	r2, r2, #16
  71 002a 9A61     		str	r2, [r3, #24]
  72              		.loc 1 245 3 view .LVU12
  73 002c 9A69     		ldr	r2, [r3, #24]
  74 002e 02F01002 		and	r2, r2, #16
  75 0032 0292     		str	r2, [sp, #8]
  76              		.loc 1 245 3 view .LVU13
  77 0034 029A     		ldr	r2, [sp, #8]
  78              	.LBE5:
  79              		.loc 1 245 3 view .LVU14
 246:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  80              		.loc 1 246 3 view .LVU15
  81              	.LBB6:
  82              		.loc 1 246 3 view .LVU16
  83              		.loc 1 246 3 view .LVU17
  84 0036 9A69     		ldr	r2, [r3, #24]
  85 0038 42F00402 		orr	r2, r2, #4
  86 003c 9A61     		str	r2, [r3, #24]
  87              		.loc 1 246 3 view .LVU18
  88 003e 9B69     		ldr	r3, [r3, #24]
  89 0040 03F00403 		and	r3, r3, #4
  90 0044 0393     		str	r3, [sp, #12]
  91              		.loc 1 246 3 view .LVU19
  92 0046 039B     		ldr	r3, [sp, #12]
  93              	.LBE6:
  94              		.loc 1 246 3 view .LVU20
 247:Core/Src/main.c **** 
 248:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 249:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
ARM GAS  /tmp/cce3vpWk.s 			page 7


  95              		.loc 1 249 3 view .LVU21
  96 0048 DFF86080 		ldr	r8, .L3+4
  97 004c 2246     		mov	r2, r4
  98 004e 4FF48051 		mov	r1, #4096
  99 0052 4046     		mov	r0, r8
 100 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 252:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 252 3 view .LVU22
 103 0058 154E     		ldr	r6, .L3+8
 104 005a 2246     		mov	r2, r4
 105 005c 4FF44071 		mov	r1, #768
 106 0060 3046     		mov	r0, r6
 107 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL1:
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /*Configure GPIO pin : PB12 */
 255:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_12;
 109              		.loc 1 255 3 view .LVU23
 110              		.loc 1 255 23 is_stmt 0 view .LVU24
 111 0066 4FF48053 		mov	r3, #4096
 112 006a 0493     		str	r3, [sp, #16]
 256:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 113              		.loc 1 256 3 is_stmt 1 view .LVU25
 114              		.loc 1 256 24 is_stmt 0 view .LVU26
 115 006c 0125     		movs	r5, #1
 116 006e 0595     		str	r5, [sp, #20]
 257:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 257 3 is_stmt 1 view .LVU27
 118              		.loc 1 257 24 is_stmt 0 view .LVU28
 119 0070 0694     		str	r4, [sp, #24]
 258:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 120              		.loc 1 258 3 is_stmt 1 view .LVU29
 121              		.loc 1 258 25 is_stmt 0 view .LVU30
 122 0072 0227     		movs	r7, #2
 123 0074 0797     		str	r7, [sp, #28]
 259:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 124              		.loc 1 259 3 is_stmt 1 view .LVU31
 125 0076 04A9     		add	r1, sp, #16
 126 0078 4046     		mov	r0, r8
 127 007a FFF7FEFF 		bl	HAL_GPIO_Init
 128              	.LVL2:
 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /*Configure GPIO pins : PC8 PC9 */
 262:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 129              		.loc 1 262 3 view .LVU32
 130              		.loc 1 262 23 is_stmt 0 view .LVU33
 131 007e 4FF44073 		mov	r3, #768
 132 0082 0493     		str	r3, [sp, #16]
 263:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 133              		.loc 1 263 3 is_stmt 1 view .LVU34
 134              		.loc 1 263 24 is_stmt 0 view .LVU35
 135 0084 0595     		str	r5, [sp, #20]
 264:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 264 3 is_stmt 1 view .LVU36
ARM GAS  /tmp/cce3vpWk.s 			page 8


 137              		.loc 1 264 24 is_stmt 0 view .LVU37
 138 0086 0694     		str	r4, [sp, #24]
 265:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 139              		.loc 1 265 3 is_stmt 1 view .LVU38
 140              		.loc 1 265 25 is_stmt 0 view .LVU39
 141 0088 0797     		str	r7, [sp, #28]
 266:Core/Src/main.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 142              		.loc 1 266 3 is_stmt 1 view .LVU40
 143 008a 04A9     		add	r1, sp, #16
 144 008c 3046     		mov	r0, r6
 145 008e FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL3:
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 269:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 147              		.loc 1 269 3 view .LVU41
 148              		.loc 1 269 23 is_stmt 0 view .LVU42
 149 0092 0495     		str	r5, [sp, #16]
 270:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 270 3 is_stmt 1 view .LVU43
 151              		.loc 1 270 24 is_stmt 0 view .LVU44
 152 0094 0594     		str	r4, [sp, #20]
 271:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 271 3 is_stmt 1 view .LVU45
 154              		.loc 1 271 24 is_stmt 0 view .LVU46
 155 0096 0694     		str	r4, [sp, #24]
 272:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 156              		.loc 1 272 3 is_stmt 1 view .LVU47
 157 0098 04A9     		add	r1, sp, #16
 158 009a 0648     		ldr	r0, .L3+12
 159 009c FFF7FEFF 		bl	HAL_GPIO_Init
 160              	.LVL4:
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 277:Core/Src/main.c **** }
 161              		.loc 1 277 1 is_stmt 0 view .LVU48
 162 00a0 08B0     		add	sp, sp, #32
 163              	.LCFI2:
 164              		.cfi_def_cfa_offset 24
 165              		@ sp needed
 166 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 167              	.L4:
 168 00a6 00BF     		.align	2
 169              	.L3:
 170 00a8 00100240 		.word	1073876992
 171 00ac 000C0140 		.word	1073810432
 172 00b0 00100140 		.word	1073811456
 173 00b4 00080140 		.word	1073809408
 174              		.cfi_endproc
 175              	.LFE69:
 177              		.section	.text.EEPROM_ReadByte,"ax",%progbits
 178              		.align	1
 179              		.global	EEPROM_ReadByte
 180              		.syntax unified
 181              		.thumb
ARM GAS  /tmp/cce3vpWk.s 			page 9


 182              		.thumb_func
 184              	EEPROM_ReadByte:
 185              	.LVL5:
 186              	.LFB65:
  69:Core/Src/main.c ****   uint8_t data;
 187              		.loc 1 69 40 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 8
 190              		@ frame_needed = 0, uses_anonymous_args = 0
  69:Core/Src/main.c ****   uint8_t data;
 191              		.loc 1 69 40 is_stmt 0 view .LVU50
 192 0000 70B5     		push	{r4, r5, r6, lr}
 193              	.LCFI3:
 194              		.cfi_def_cfa_offset 16
 195              		.cfi_offset 4, -16
 196              		.cfi_offset 5, -12
 197              		.cfi_offset 6, -8
 198              		.cfi_offset 14, -4
 199 0002 82B0     		sub	sp, sp, #8
 200              	.LCFI4:
 201              		.cfi_def_cfa_offset 24
  70:Core/Src/main.c ****   uint8_t msg[3];
 202              		.loc 1 70 3 is_stmt 1 view .LVU51
  71:Core/Src/main.c ****   msg[0] = EEPROM_INSTR_READ;
 203              		.loc 1 71 3 view .LVU52
  72:Core/Src/main.c ****   msg[1] = (addr >> 8) & 0xFF; // MSB wird um 8 bits nach rechts verschoben
 204              		.loc 1 72 3 view .LVU53
  72:Core/Src/main.c ****   msg[1] = (addr >> 8) & 0xFF; // MSB wird um 8 bits nach rechts verschoben
 205              		.loc 1 72 10 is_stmt 0 view .LVU54
 206 0004 0326     		movs	r6, #3
 207 0006 8DF80460 		strb	r6, [sp, #4]
  73:Core/Src/main.c ****                                // und anschlißen wird der rest "abgeschnitten"
 208              		.loc 1 73 3 is_stmt 1 view .LVU55
  73:Core/Src/main.c ****                                // und anschlißen wird der rest "abgeschnitten"
 209              		.loc 1 73 10 is_stmt 0 view .LVU56
 210 000a 030A     		lsrs	r3, r0, #8
 211 000c 8DF80530 		strb	r3, [sp, #5]
  75:Core/Src/main.c **** 
 212              		.loc 1 75 3 is_stmt 1 view .LVU57
  75:Core/Src/main.c **** 
 213              		.loc 1 75 10 is_stmt 0 view .LVU58
 214 0010 8DF80600 		strb	r0, [sp, #6]
  77:Core/Src/main.c ****   HAL_Delay(1000);
 215              		.loc 1 77 3 is_stmt 1 view .LVU59
 216 0014 144C     		ldr	r4, .L7
 217 0016 0022     		movs	r2, #0
 218 0018 4FF48051 		mov	r1, #4096
 219 001c 2046     		mov	r0, r4
 220              	.LVL6:
  77:Core/Src/main.c ****   HAL_Delay(1000);
 221              		.loc 1 77 3 is_stmt 0 view .LVU60
 222 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 223              	.LVL7:
  78:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi2, msg, 3,
 224              		.loc 1 78 3 is_stmt 1 view .LVU61
 225 0022 4FF47A70 		mov	r0, #1000
 226 0026 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /tmp/cce3vpWk.s 			page 10


 227              	.LVL8:
  79:Core/Src/main.c ****                    HAL_MAX_DELAY); // separates transmit und receive, da hier
 228              		.loc 1 79 3 view .LVU62
 229 002a 104D     		ldr	r5, .L7+4
 230 002c 4FF0FF33 		mov	r3, #-1
 231 0030 3246     		mov	r2, r6
 232 0032 01A9     		add	r1, sp, #4
 233 0034 2846     		mov	r0, r5
 234 0036 FFF7FEFF 		bl	HAL_SPI_Transmit
 235              	.LVL9:
  83:Core/Src/main.c ****   HAL_Delay(1000);
 236              		.loc 1 83 3 view .LVU63
 237 003a 4FF0FF33 		mov	r3, #-1
 238 003e 0122     		movs	r2, #1
 239 0040 0DF10701 		add	r1, sp, #7
 240 0044 2846     		mov	r0, r5
 241 0046 FFF7FEFF 		bl	HAL_SPI_Receive
 242              	.LVL10:
  84:Core/Src/main.c **** 
 243              		.loc 1 84 3 view .LVU64
 244 004a 4FF47A70 		mov	r0, #1000
 245 004e FFF7FEFF 		bl	HAL_Delay
 246              	.LVL11:
  86:Core/Src/main.c **** 
 247              		.loc 1 86 3 view .LVU65
 248 0052 0122     		movs	r2, #1
 249 0054 4FF48051 		mov	r1, #4096
 250 0058 2046     		mov	r0, r4
 251 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 252              	.LVL12:
  88:Core/Src/main.c **** }
 253              		.loc 1 88 3 view .LVU66
  89:Core/Src/main.c **** /* USER CODE END 0 */
 254              		.loc 1 89 1 is_stmt 0 view .LVU67
 255 005e 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 256 0062 02B0     		add	sp, sp, #8
 257              	.LCFI5:
 258              		.cfi_def_cfa_offset 16
 259              		@ sp needed
 260 0064 70BD     		pop	{r4, r5, r6, pc}
 261              	.L8:
 262 0066 00BF     		.align	2
 263              	.L7:
 264 0068 000C0140 		.word	1073810432
 265 006c 00000000 		.word	hspi2
 266              		.cfi_endproc
 267              	.LFE65:
 269              		.section	.text.Error_Handler,"ax",%progbits
 270              		.align	1
 271              		.global	Error_Handler
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 276              	Error_Handler:
 277              	.LFB70:
 278:Core/Src/main.c **** 
 279:Core/Src/main.c **** /* USER CODE BEGIN 4 */
ARM GAS  /tmp/cce3vpWk.s 			page 11


 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** /* USER CODE END 4 */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c **** /**
 284:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 285:Core/Src/main.c ****  * @retval None
 286:Core/Src/main.c ****  */
 287:Core/Src/main.c **** void Error_Handler(void) {
 278              		.loc 1 287 26 is_stmt 1 view -0
 279              		.cfi_startproc
 280              		@ Volatile: function does not return.
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 288:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 289:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state
 290:Core/Src/main.c ****    */
 291:Core/Src/main.c ****   __disable_irq();
 284              		.loc 1 291 3 view .LVU69
 285              	.LBB7:
 286              	.LBI7:
 287              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
ARM GAS  /tmp/cce3vpWk.s 			page 12


  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
ARM GAS  /tmp/cce3vpWk.s 			page 13


  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 288              		.loc 2 140 27 view .LVU70
 289              	.LBB8:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 290              		.loc 2 142 3 view .LVU71
 291              		.syntax unified
 292              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 293 0000 72B6     		cpsid i
 294              	@ 0 "" 2
ARM GAS  /tmp/cce3vpWk.s 			page 14


 295              		.thumb
 296              		.syntax unified
 297              	.L10:
 298              	.LBE8:
 299              	.LBE7:
 292:Core/Src/main.c ****   while (1) {
 300              		.loc 1 292 3 view .LVU72
 293:Core/Src/main.c ****   }
 301              		.loc 1 293 3 view .LVU73
 292:Core/Src/main.c ****   while (1) {
 302              		.loc 1 292 9 view .LVU74
 303 0002 FEE7     		b	.L10
 304              		.cfi_endproc
 305              	.LFE70:
 307              		.section	.text.MX_SPI2_Init,"ax",%progbits
 308              		.align	1
 309              		.syntax unified
 310              		.thumb
 311              		.thumb_func
 313              	MX_SPI2_Init:
 314              	.LFB68:
 202:Core/Src/main.c **** 
 315              		.loc 1 202 32 view -0
 316              		.cfi_startproc
 317              		@ args = 0, pretend = 0, frame = 0
 318              		@ frame_needed = 0, uses_anonymous_args = 0
 319 0000 08B5     		push	{r3, lr}
 320              	.LCFI6:
 321              		.cfi_def_cfa_offset 8
 322              		.cfi_offset 3, -8
 323              		.cfi_offset 14, -4
 212:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 324              		.loc 1 212 3 view .LVU76
 212:Core/Src/main.c ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 325              		.loc 1 212 18 is_stmt 0 view .LVU77
 326 0002 0D48     		ldr	r0, .L15
 327 0004 0D4B     		ldr	r3, .L15+4
 328 0006 0360     		str	r3, [r0]
 213:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 329              		.loc 1 213 3 is_stmt 1 view .LVU78
 213:Core/Src/main.c ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 330              		.loc 1 213 19 is_stmt 0 view .LVU79
 331 0008 4FF48273 		mov	r3, #260
 332 000c 4360     		str	r3, [r0, #4]
 214:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 333              		.loc 1 214 3 is_stmt 1 view .LVU80
 214:Core/Src/main.c ****   hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 334              		.loc 1 214 24 is_stmt 0 view .LVU81
 335 000e 0023     		movs	r3, #0
 336 0010 8360     		str	r3, [r0, #8]
 215:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 337              		.loc 1 215 3 is_stmt 1 view .LVU82
 215:Core/Src/main.c ****   hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 338              		.loc 1 215 23 is_stmt 0 view .LVU83
 339 0012 C360     		str	r3, [r0, #12]
 216:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 340              		.loc 1 216 3 is_stmt 1 view .LVU84
ARM GAS  /tmp/cce3vpWk.s 			page 15


 216:Core/Src/main.c ****   hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 341              		.loc 1 216 26 is_stmt 0 view .LVU85
 342 0014 0361     		str	r3, [r0, #16]
 217:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 343              		.loc 1 217 3 is_stmt 1 view .LVU86
 217:Core/Src/main.c ****   hspi2.Init.NSS = SPI_NSS_SOFT;
 344              		.loc 1 217 23 is_stmt 0 view .LVU87
 345 0016 4361     		str	r3, [r0, #20]
 218:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 346              		.loc 1 218 3 is_stmt 1 view .LVU88
 218:Core/Src/main.c ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 347              		.loc 1 218 18 is_stmt 0 view .LVU89
 348 0018 4FF40072 		mov	r2, #512
 349 001c 8261     		str	r2, [r0, #24]
 219:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 350              		.loc 1 219 3 is_stmt 1 view .LVU90
 219:Core/Src/main.c ****   hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 351              		.loc 1 219 32 is_stmt 0 view .LVU91
 352 001e C361     		str	r3, [r0, #28]
 220:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 353              		.loc 1 220 3 is_stmt 1 view .LVU92
 220:Core/Src/main.c ****   hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 354              		.loc 1 220 23 is_stmt 0 view .LVU93
 355 0020 0362     		str	r3, [r0, #32]
 221:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 356              		.loc 1 221 3 is_stmt 1 view .LVU94
 221:Core/Src/main.c ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 357              		.loc 1 221 21 is_stmt 0 view .LVU95
 358 0022 4362     		str	r3, [r0, #36]
 222:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 359              		.loc 1 222 3 is_stmt 1 view .LVU96
 222:Core/Src/main.c ****   hspi2.Init.CRCPolynomial = 10;
 360              		.loc 1 222 29 is_stmt 0 view .LVU97
 361 0024 8362     		str	r3, [r0, #40]
 223:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 362              		.loc 1 223 3 is_stmt 1 view .LVU98
 223:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 363              		.loc 1 223 28 is_stmt 0 view .LVU99
 364 0026 0A23     		movs	r3, #10
 365 0028 C362     		str	r3, [r0, #44]
 224:Core/Src/main.c ****     Error_Handler();
 366              		.loc 1 224 3 is_stmt 1 view .LVU100
 224:Core/Src/main.c ****     Error_Handler();
 367              		.loc 1 224 7 is_stmt 0 view .LVU101
 368 002a FFF7FEFF 		bl	HAL_SPI_Init
 369              	.LVL13:
 224:Core/Src/main.c ****     Error_Handler();
 370              		.loc 1 224 6 discriminator 1 view .LVU102
 371 002e 00B9     		cbnz	r0, .L14
 230:Core/Src/main.c **** 
 372              		.loc 1 230 1 view .LVU103
 373 0030 08BD     		pop	{r3, pc}
 374              	.L14:
 225:Core/Src/main.c ****   }
 375              		.loc 1 225 5 is_stmt 1 view .LVU104
 376 0032 FFF7FEFF 		bl	Error_Handler
 377              	.LVL14:
ARM GAS  /tmp/cce3vpWk.s 			page 16


 378              	.L16:
 379 0036 00BF     		.align	2
 380              	.L15:
 381 0038 00000000 		.word	hspi2
 382 003c 00380040 		.word	1073756160
 383              		.cfi_endproc
 384              	.LFE68:
 386              		.section	.text.SystemClock_Config,"ax",%progbits
 387              		.align	1
 388              		.global	SystemClock_Config
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	SystemClock_Config:
 394              	.LFB67:
 168:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 395              		.loc 1 168 31 view -0
 396              		.cfi_startproc
 397              		@ args = 0, pretend = 0, frame = 64
 398              		@ frame_needed = 0, uses_anonymous_args = 0
 399 0000 00B5     		push	{lr}
 400              	.LCFI7:
 401              		.cfi_def_cfa_offset 4
 402              		.cfi_offset 14, -4
 403 0002 91B0     		sub	sp, sp, #68
 404              	.LCFI8:
 405              		.cfi_def_cfa_offset 72
 169:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 406              		.loc 1 169 3 view .LVU106
 169:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 407              		.loc 1 169 22 is_stmt 0 view .LVU107
 408 0004 2822     		movs	r2, #40
 409 0006 0021     		movs	r1, #0
 410 0008 06A8     		add	r0, sp, #24
 411 000a FFF7FEFF 		bl	memset
 412              	.LVL15:
 170:Core/Src/main.c **** 
 413              		.loc 1 170 3 is_stmt 1 view .LVU108
 170:Core/Src/main.c **** 
 414              		.loc 1 170 22 is_stmt 0 view .LVU109
 415 000e 0023     		movs	r3, #0
 416 0010 0193     		str	r3, [sp, #4]
 417 0012 0293     		str	r3, [sp, #8]
 418 0014 0393     		str	r3, [sp, #12]
 419 0016 0493     		str	r3, [sp, #16]
 420 0018 0593     		str	r3, [sp, #20]
 175:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 421              		.loc 1 175 3 is_stmt 1 view .LVU110
 175:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 422              		.loc 1 175 36 is_stmt 0 view .LVU111
 423 001a 0223     		movs	r3, #2
 424 001c 0693     		str	r3, [sp, #24]
 176:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 425              		.loc 1 176 3 is_stmt 1 view .LVU112
 176:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 426              		.loc 1 176 30 is_stmt 0 view .LVU113
 427 001e 0123     		movs	r3, #1
ARM GAS  /tmp/cce3vpWk.s 			page 17


 428 0020 0A93     		str	r3, [sp, #40]
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 429              		.loc 1 177 3 is_stmt 1 view .LVU114
 177:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 430              		.loc 1 177 41 is_stmt 0 view .LVU115
 431 0022 1023     		movs	r3, #16
 432 0024 0B93     		str	r3, [sp, #44]
 178:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 433              		.loc 1 178 3 is_stmt 1 view .LVU116
 179:Core/Src/main.c ****     Error_Handler();
 434              		.loc 1 179 3 view .LVU117
 179:Core/Src/main.c ****     Error_Handler();
 435              		.loc 1 179 7 is_stmt 0 view .LVU118
 436 0026 06A8     		add	r0, sp, #24
 437 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
 438              	.LVL16:
 179:Core/Src/main.c ****     Error_Handler();
 439              		.loc 1 179 6 discriminator 1 view .LVU119
 440 002c 68B9     		cbnz	r0, .L21
 185:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 441              		.loc 1 185 3 is_stmt 1 view .LVU120
 185:Core/Src/main.c ****                                 RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 442              		.loc 1 185 31 is_stmt 0 view .LVU121
 443 002e 0F23     		movs	r3, #15
 444 0030 0193     		str	r3, [sp, #4]
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 445              		.loc 1 187 3 is_stmt 1 view .LVU122
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 446              		.loc 1 187 34 is_stmt 0 view .LVU123
 447 0032 0021     		movs	r1, #0
 448 0034 0291     		str	r1, [sp, #8]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 449              		.loc 1 188 3 is_stmt 1 view .LVU124
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 450              		.loc 1 188 35 is_stmt 0 view .LVU125
 451 0036 0391     		str	r1, [sp, #12]
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 452              		.loc 1 189 3 is_stmt 1 view .LVU126
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 453              		.loc 1 189 36 is_stmt 0 view .LVU127
 454 0038 0491     		str	r1, [sp, #16]
 190:Core/Src/main.c **** 
 455              		.loc 1 190 3 is_stmt 1 view .LVU128
 190:Core/Src/main.c **** 
 456              		.loc 1 190 36 is_stmt 0 view .LVU129
 457 003a 0591     		str	r1, [sp, #20]
 192:Core/Src/main.c ****     Error_Handler();
 458              		.loc 1 192 3 is_stmt 1 view .LVU130
 192:Core/Src/main.c ****     Error_Handler();
 459              		.loc 1 192 7 is_stmt 0 view .LVU131
 460 003c 01A8     		add	r0, sp, #4
 461 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 462              	.LVL17:
 192:Core/Src/main.c ****     Error_Handler();
 463              		.loc 1 192 6 discriminator 1 view .LVU132
 464 0042 20B9     		cbnz	r0, .L22
 195:Core/Src/main.c **** 
ARM GAS  /tmp/cce3vpWk.s 			page 18


 465              		.loc 1 195 1 view .LVU133
 466 0044 11B0     		add	sp, sp, #68
 467              	.LCFI9:
 468              		.cfi_remember_state
 469              		.cfi_def_cfa_offset 4
 470              		@ sp needed
 471 0046 5DF804FB 		ldr	pc, [sp], #4
 472              	.L21:
 473              	.LCFI10:
 474              		.cfi_restore_state
 180:Core/Src/main.c ****   }
 475              		.loc 1 180 5 is_stmt 1 view .LVU134
 476 004a FFF7FEFF 		bl	Error_Handler
 477              	.LVL18:
 478              	.L22:
 193:Core/Src/main.c ****   }
 479              		.loc 1 193 5 view .LVU135
 480 004e FFF7FEFF 		bl	Error_Handler
 481              	.LVL19:
 482              		.cfi_endproc
 483              	.LFE67:
 485              		.section	.text.main,"ax",%progbits
 486              		.align	1
 487              		.global	main
 488              		.syntax unified
 489              		.thumb
 490              		.thumb_func
 492              	main:
 493              	.LFB66:
  96:Core/Src/main.c **** 
 494              		.loc 1 96 16 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498 0000 10B5     		push	{r4, lr}
 499              	.LCFI11:
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 4, -8
 502              		.cfi_offset 14, -4
 106:Core/Src/main.c **** 
 503              		.loc 1 106 3 view .LVU137
 504 0002 FFF7FEFF 		bl	HAL_Init
 505              	.LVL20:
 113:Core/Src/main.c **** 
 506              		.loc 1 113 3 view .LVU138
 507 0006 FFF7FEFF 		bl	SystemClock_Config
 508              	.LVL21:
 120:Core/Src/main.c ****   MX_SPI2_Init();
 509              		.loc 1 120 3 view .LVU139
 510 000a FFF7FEFF 		bl	MX_GPIO_Init
 511              	.LVL22:
 121:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 512              		.loc 1 121 3 view .LVU140
 513 000e FFF7FEFF 		bl	MX_SPI2_Init
 514              	.LVL23:
 515              	.L24:
 131:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
ARM GAS  /tmp/cce3vpWk.s 			page 19


 516              		.loc 1 131 3 view .LVU141
 517              	.LBB9:
 132:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 518              		.loc 1 132 5 view .LVU142
 519 0012 104C     		ldr	r4, .L27
 520 0014 0022     		movs	r2, #0
 521 0016 4FF48071 		mov	r1, #256
 522 001a 2046     		mov	r0, r4
 523 001c FFF7FEFF 		bl	HAL_GPIO_WritePin
 524              	.LVL24:
 133:Core/Src/main.c ****     GPIO_PinState buttonPressed = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 525              		.loc 1 133 5 view .LVU143
 526 0020 0022     		movs	r2, #0
 527 0022 4FF40071 		mov	r1, #512
 528 0026 2046     		mov	r0, r4
 529 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 530              	.LVL25:
 134:Core/Src/main.c ****     if (buttonPressed == GPIO_PIN_SET) {
 531              		.loc 1 134 5 view .LVU144
 134:Core/Src/main.c ****     if (buttonPressed == GPIO_PIN_SET) {
 532              		.loc 1 134 35 is_stmt 0 view .LVU145
 533 002c 0121     		movs	r1, #1
 534 002e 0A48     		ldr	r0, .L27+4
 535 0030 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 536              	.LVL26:
 135:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 537              		.loc 1 135 5 is_stmt 1 view .LVU146
 135:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 538              		.loc 1 135 8 is_stmt 0 view .LVU147
 539 0034 0128     		cmp	r0, #1
 540 0036 ECD1     		bne	.L24
 136:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 541              		.loc 1 136 7 is_stmt 1 view .LVU148
 542 0038 4FF48071 		mov	r1, #256
 543 003c 2046     		mov	r0, r4
 544              	.LVL27:
 136:Core/Src/main.c ****       HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 545              		.loc 1 136 7 is_stmt 0 view .LVU149
 546 003e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 547              	.LVL28:
 137:Core/Src/main.c ****       EEPROM_ReadByte(0x0000);
 548              		.loc 1 137 7 is_stmt 1 view .LVU150
 549 0042 4FF40071 		mov	r1, #512
 550 0046 2046     		mov	r0, r4
 551 0048 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 552              	.LVL29:
 138:Core/Src/main.c ****     }
 553              		.loc 1 138 7 view .LVU151
 554 004c 0020     		movs	r0, #0
 555 004e FFF7FEFF 		bl	EEPROM_ReadByte
 556              	.LVL30:
 557 0052 DEE7     		b	.L24
 558              	.L28:
 559              		.align	2
 560              	.L27:
 561 0054 00100140 		.word	1073811456
 562 0058 00080140 		.word	1073809408
ARM GAS  /tmp/cce3vpWk.s 			page 20


 563              	.LBE9:
 564              		.cfi_endproc
 565              	.LFE66:
 567              		.global	hspi2
 568              		.section	.bss.hspi2,"aw",%nobits
 569              		.align	2
 572              	hspi2:
 573 0000 00000000 		.space	88
 573      00000000 
 573      00000000 
 573      00000000 
 573      00000000 
 574              		.text
 575              	.Letext0:
 576              		.file 3 "/usr/lib/gcc/arm-none-eabi/13.2.1/include/stdint.h"
 577              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f100xb.h"
 578              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 579              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 580              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 581              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 582              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 583              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_spi.h"
 584              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 585              		.file 12 "<built-in>"
ARM GAS  /tmp/cce3vpWk.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cce3vpWk.s:19     .text.MX_GPIO_Init:00000000 $t
     /tmp/cce3vpWk.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/cce3vpWk.s:170    .text.MX_GPIO_Init:000000a8 $d
     /tmp/cce3vpWk.s:178    .text.EEPROM_ReadByte:00000000 $t
     /tmp/cce3vpWk.s:184    .text.EEPROM_ReadByte:00000000 EEPROM_ReadByte
     /tmp/cce3vpWk.s:264    .text.EEPROM_ReadByte:00000068 $d
     /tmp/cce3vpWk.s:572    .bss.hspi2:00000000 hspi2
     /tmp/cce3vpWk.s:270    .text.Error_Handler:00000000 $t
     /tmp/cce3vpWk.s:276    .text.Error_Handler:00000000 Error_Handler
     /tmp/cce3vpWk.s:308    .text.MX_SPI2_Init:00000000 $t
     /tmp/cce3vpWk.s:313    .text.MX_SPI2_Init:00000000 MX_SPI2_Init
     /tmp/cce3vpWk.s:381    .text.MX_SPI2_Init:00000038 $d
     /tmp/cce3vpWk.s:387    .text.SystemClock_Config:00000000 $t
     /tmp/cce3vpWk.s:393    .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/cce3vpWk.s:486    .text.main:00000000 $t
     /tmp/cce3vpWk.s:492    .text.main:00000000 main
     /tmp/cce3vpWk.s:561    .text.main:00000054 $d
     /tmp/cce3vpWk.s:569    .bss.hspi2:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_Delay
HAL_SPI_Transmit
HAL_SPI_Receive
HAL_SPI_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_ReadPin
HAL_GPIO_TogglePin
